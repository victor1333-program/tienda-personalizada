generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id               String   @id @default(uuid())
  name             String
  description      String?
  price            Float
  stock            Int
  minStock         Int
  sku              String   @unique
  categoryId       String?
  images           String[]
  colors           String[]
  sizes            String[]
  material         String?
  weight           Float?
  dimensions       String?
  isActive         Boolean  @default(true)
  isCustomizable   Boolean  @default(false)
  allowImageUpload Boolean  @default(false)
  customTextFields String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  category         Category?          @relation(fields: [categoryId], references: [id])
  variants         Variant[]
  suppliers        ProductSupplier[]
  inventoryHistory InventoryHistory[]
}

model Variant {
  id        String   @id @default(uuid())
  productId String
  color     String
  size      String
  stock     Int
  price     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  total     Float
  status    String   @default("pending")
  createdAt DateTime @default(now())

  invoice Invoice?
  user    User     @relation(fields: [userId], references: [id])
}

model User {
  id                 String   @id @default(uuid())
  name               String
  email              String   @unique
  password           String
  role               String   @default("user")
  isActive           Boolean  @default(true)
  resetPasswordToken String?
  createdAt          DateTime @default(now())

  orders Order[]
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  products Product[] // Relación inversa con Product
  images   GalleryImage[] // Relación con las imágenes de la galería
}

model GalleryImage {
  id         String   @id @default(uuid())
  imageUrl   String
  title      String
  categoryId String
  createdAt  DateTime @default(now())

  category Category @relation(fields: [categoryId], references: [id])
}

model Invoice {
  id            String   @id @default(uuid())
  orderId       String   @unique
  invoiceNumber String   @unique
  clientName    String
  clientEmail   String
  items         Json
  subtotal      Float
  tax           Float
  total         Float
  status        String   @default("pending")
  createdAt     DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])
}

model Config {
  id           String @id @default(uuid())
  invoiceStart Int    @default(1000)
  taxRate      Float  @default(21.0)
  orderEmail   String @default("pedidos@tuempresa.com")
  contactEmail String @default("contacto@tuempresa.com")
  invoiceEmail String @default("facturas@tuempresa.com")
}

model Supplier {
  id        String   @id @default(uuid())
  name      String
  contact   String?
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())

  products ProductSupplier[]
}

model ProductSupplier {
  productId  String
  supplierId String
  cost       Float

  product  Product  @relation(fields: [productId], references: [id])
  supplier Supplier @relation(fields: [supplierId], references: [id])

  @@id([productId, supplierId])
}

model InventoryHistory {
  id          String   @id @default(uuid())
  productId   String
  type        String // entrada o salida
  quantity    Int
  userId      String
  description String?
  createdAt   DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
}

model AdminUser {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
}
